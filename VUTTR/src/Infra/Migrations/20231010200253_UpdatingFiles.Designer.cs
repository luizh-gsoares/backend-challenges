// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VUTTR.Infra.Data;

#nullable disable

namespace VUTTR.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231010200253_UpdatingFiles")]
    partial class UpdatingFiles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TagTool", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("ToolsId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "ToolsId");

                    b.HasIndex("ToolsId");

                    b.ToTable("TagTool");
                });

            modelBuilder.Entity("VUTTR.Domain.Tools.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("VUTTR.Domain.Tools.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("VUTTR.Domain.Tools.ToolTag", b =>
                {
                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ToolId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ToolTags");
                });

            modelBuilder.Entity("TagTool", b =>
                {
                    b.HasOne("VUTTR.Domain.Tools.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VUTTR.Domain.Tools.Tool", null)
                        .WithMany()
                        .HasForeignKey("ToolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VUTTR.Domain.Tools.ToolTag", b =>
                {
                    b.HasOne("VUTTR.Domain.Tools.Tag", "Tag")
                        .WithMany("ToolTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VUTTR.Domain.Tools.Tool", "Tool")
                        .WithMany("ToolTags")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("VUTTR.Domain.Tools.Tag", b =>
                {
                    b.Navigation("ToolTags");
                });

            modelBuilder.Entity("VUTTR.Domain.Tools.Tool", b =>
                {
                    b.Navigation("ToolTags");
                });
#pragma warning restore 612, 618
        }
    }
}
